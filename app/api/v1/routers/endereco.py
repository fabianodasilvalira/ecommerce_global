from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from app.db.database import get_db
from app.schemas.endereco import EnderecoCreate, EnderecoUpdate, EnderecoOut
from app.services import endereco_service
from app.core.security import get_current_user  # Fun√ß√£o de autentica√ß√£o

router = APIRouter()


# üßæ Criar novo endere√ßo
@router.post(
    "/",
    response_model=EnderecoOut,
    summary="Criar novo endere√ßo",
    status_code=status.HTTP_201_CREATED,
    response_description="Endere√ßo criado com sucesso"
)
def criar(
        endereco: EnderecoCreate,
        db: Session = Depends(get_db),
        usuario: str = Depends(get_current_user)  # Acesso do usu√°rio autenticado
):
    """
    Cria um novo endere√ßo no sistema.

    **Par√¢metros**:
        - **endereco**: Dados do endere√ßo a ser criado.

    **Respostas**:
        - **201 Created**: Endere√ßo criado com sucesso.
        - **401 Unauthorized**: Se o usu√°rio n√£o estiver autenticado.
    """
    return endereco_service.criar_endereco(db, endereco)


# üìú Listar endere√ßos (por ID de usu√°rio opcional)
@router.get(
    "/",
    response_model=list[EnderecoOut],
    summary="Listar endere√ßos",
    response_description="Lista de endere√ßos"
)
def listar(
        usuario_id: int = None,
        db: Session = Depends(get_db),
        usuario: str = Depends(get_current_user)  # Acesso do usu√°rio autenticado
):
    """
    Lista todos os endere√ßos de um usu√°rio, se fornecido o `usuario_id`.

    **Par√¢metros**:
        - **usuario_id**: ID do usu√°rio cujos endere√ßos ser√£o listados. (Opcional)

    **Respostas**:
        - **200 OK**: Retorna a lista de endere√ßos.
        - **401 Unauthorized**: Se o usu√°rio n√£o estiver autenticado.
    """
    return endereco_service.listar_enderecos(db, usuario_id)


# üîç Buscar endere√ßo por ID
@router.get(
    "/{endereco_id}",
    response_model=EnderecoOut,
    summary="Buscar endere√ßo por ID",
    response_description="Detalhes do endere√ßo encontrado"
)
def buscar(
        endereco_id: int,
        db: Session = Depends(get_db),
        usuario: str = Depends(get_current_user)  # Acesso do usu√°rio autenticado
):
    """
    Busca um endere√ßo espec√≠fico baseado no ID fornecido.

    **Par√¢metros**:
        - **endereco_id**: ID do endere√ßo a ser buscado.

    **Respostas**:
        - **200 OK**: Retorna os detalhes do endere√ßo.
        - **401 Unauthorized**: Se o usu√°rio n√£o estiver autenticado.
        - **404 Not Found**: Se o endere√ßo com o ID fornecido n√£o for encontrado.
    """
    endereco = endereco_service.buscar_endereco(db, endereco_id)
    if not endereco:
        raise HTTPException(status_code=404, detail="Endere√ßo n√£o encontrado")
    return endereco


# ‚úèÔ∏è Atualizar endere√ßo por ID
@router.put(
    "/{endereco_id}/editar",
    response_model=EnderecoOut,
    summary="Editar endere√ßo",
    response_description="Endere√ßo atualizado com sucesso"
)
def atualizar(
        endereco_id: int,
        dados: EnderecoUpdate,
        db: Session = Depends(get_db),
        usuario: str = Depends(get_current_user)  # Acesso do usu√°rio autenticado
):
    """
    Atualiza os dados de um endere√ßo espec√≠fico.

    **Par√¢metros**:
        - **endereco_id**: ID do endere√ßo a ser atualizado.
        - **dados**: Dados atualizados do endere√ßo.

    **Respostas**:
        - **200 OK**: Endere√ßo atualizado com sucesso.
        - **401 Unauthorized**: Se o usu√°rio n√£o estiver autenticado.
        - **404 Not Found**: Se o endere√ßo com o ID fornecido n√£o for encontrado.
    """
    endereco = endereco_service.atualizar_endereco(db, endereco_id, dados)
    if not endereco:
        raise HTTPException(status_code=404, detail="Endere√ßo n√£o encontrado")
    return endereco


# üóëÔ∏è Inativar endere√ßo por ID
@router.delete(
    "/{endereco_id}/inativar",
    summary="Inativar endere√ßo",
    status_code=status.HTTP_204_NO_CONTENT,
    response_description="Endere√ßo inativado com sucesso"
)
def inativar(
        endereco_id: int,
        db: Session = Depends(get_db),
        usuario: str = Depends(get_current_user)  # Acesso do usu√°rio autenticado
):
    """
    Inativa um endere√ßo espec√≠fico.

    **Par√¢metros**:
        - **endereco_id**: ID do endere√ßo a ser inativado.

    **Respostas**:
        - **204 No Content**: Endere√ßo inativado com sucesso.
        - **401 Unauthorized**: Se o usu√°rio n√£o estiver autenticado.
        - **404 Not Found**: Se o endere√ßo com o ID fornecido n√£o for encontrado ou j√° estiver inativado.
    """
    endereco = endereco_service.inativar_endereco(db, endereco_id)
    if not endereco:
        raise HTTPException(status_code=404, detail="Endere√ßo n√£o encontrado ou j√° inativado")
    return {"ok": True, "msg": "Endere√ßo inativado com sucesso"}
