from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List
from app.db.database import get_db
from app.services.promocao_service import (
    criar_promocao_service,
    listar_promocoes_ativas_service,
    buscar_promocao_service,
    editar_promocao_service,
    inativar_promocao_service
)
from app.schemas.promocao_schema import PromocaoCreate, PromocaoResponse, PromocaoUpdate
from app.services.auth import obter_usuario_logado
from app.models.usuario import TipoUsuarioEnum, Usuario

router = APIRouter()


# üìå Criar promo√ß√£o (Protegido)
@router.post("/", response_model=PromocaoResponse, status_code=status.HTTP_201_CREATED)
async def criar_promocao(
        promocao: PromocaoCreate,
        db: Session = Depends(get_db),
        usuario_logado: Usuario = Depends(obter_usuario_logado)  # Protegido por autentica√ß√£o
):
    """
    Cria uma nova promo√ß√£o.

    **Protegido**: Apenas administradores podem criar promo√ß√µes.

    - **Par√¢metros**:
        - **promocao**: Objeto com os dados da promo√ß√£o a ser criada.
    - **Resposta**:
        - Retorna os dados da promo√ß√£o rec√©m-criada.
    """
    if usuario_logado.tipo_usuario != TipoUsuarioEnum.ADMIN:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,
                            detail="Apenas administradores podem criar promo√ß√µes.")

    try:
        return criar_promocao_service(db, promocao)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))


# üîç Listar promo√ß√µes ativas (P√∫blico ou Protegido)
@router.get("/", response_model=List[PromocaoResponse])
async def listar_promocoes_ativas(
        db: Session = Depends(get_db),
        usuario_logado: Usuario = Depends(obter_usuario_logado)  # Protegido por autentica√ß√£o
):
    """
    Lista as promo√ß√µes ativas no sistema.

    **P√∫blico**: Usu√°rios podem ver as promo√ß√µes ativas.

    - **Resposta**:
        - Lista de promo√ß√µes ativas.
    """
    return listar_promocoes_ativas_service(db)


# üîç Buscar promo√ß√£o por ID (P√∫blico ou Protegido)
@router.get("/{promocao_id}", response_model=PromocaoResponse)
async def buscar_promocao(
        promocao_id: int,
        db: Session = Depends(get_db),
        usuario_logado: Usuario = Depends(obter_usuario_logado)  # Protegido por autentica√ß√£o
):
    """
    Busca uma promo√ß√£o espec√≠fica pelo ID.

    **P√∫blico**: Usu√°rios podem buscar promo√ß√µes ativas pelo ID.

    - **Par√¢metros**:
        - **promocao_id**: ID da promo√ß√£o a ser buscada.
    - **Resposta**:
        - Dados da promo√ß√£o encontrada.
    """
    return buscar_promocao_service(db, promocao_id)


# ‚úèÔ∏è Editar promo√ß√£o (Protegido)
@router.put("/{promocao_id}/editar", response_model=PromocaoResponse)
async def editar_promocao(
        promocao_id: int,
        update_data: PromocaoUpdate,
        db: Session = Depends(get_db),
        usuario_logado: Usuario = Depends(obter_usuario_logado)  # Protegido por autentica√ß√£o
):
    """
    Edita os dados de uma promo√ß√£o existente.

    **Protegido**: Apenas administradores podem editar promo√ß√µes.

    - **Par√¢metros**:
        - **promocao_id**: ID da promo√ß√£o a ser editada.
        - **update_data**: Dados para atualiza√ß√£o da promo√ß√£o.
    - **Resposta**:
        - Dados da promo√ß√£o editada.
    """
    if usuario_logado.tipo_usuario != TipoUsuarioEnum.ADMIN:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,
                            detail="Apenas administradores podem editar promo√ß√µes.")

    try:
        return editar_promocao_service(db, promocao_id, update_data)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))


# üö´ Inativar promo√ß√£o (Protegido)
@router.put("/{promocao_id}/inativar", response_model=PromocaoResponse)
async def inativar_promocao(
        promocao_id: int,
        db: Session = Depends(get_db),
        usuario_logado: Usuario = Depends(obter_usuario_logado)  # Protegido por autentica√ß√£o
):
    """
    Inativa uma promo√ß√£o espec√≠fica.

    **Protegido**: Apenas administradores podem inativar promo√ß√µes.

    - **Par√¢metros**:
        - **promocao_id**: ID da promo√ß√£o a ser inativada.
    - **Resposta**:
        - Dados da promo√ß√£o inativada.
    """
    if usuario_logado.tipo_usuario != TipoUsuarioEnum.ADMIN:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,
                            detail="Apenas administradores podem inativar promo√ß√µes.")

    try:
        return inativar_promocao_service(db, promocao_id)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
